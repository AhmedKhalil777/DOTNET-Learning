using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;

namespace ControllersGenerators
{
    internal static class EmbeddedSources
    {
        private static readonly Assembly ThisAssembly = typeof(EmbeddedSources).Assembly;

        private static readonly string AutoGeneratedHeader = LoadEmbeddedResource("StronglyTypedIds.Templates.AutoGeneratedHeader.cs");

        internal static readonly string APIControlllerModelAttribute = LoadTemplateForEmitting("APIControllerModelAttribute");
        internal static readonly string ControllersActions = LoadTemplateForEmitting("ControllersActions");

        internal static string LoadEmbeddedResource(string resourceName)
        {
            var resourceStream = ThisAssembly.GetManifestResourceStream(resourceName);
            if (resourceStream is null)
            {
                var existingResources = ThisAssembly.GetManifestResourceNames();
                throw new ArgumentException($"Could not find embedded resource {resourceName}. Available names: {string.Join(", ", existingResources)}");
            }

            using (var reader = new StreamReader(resourceStream, Encoding.UTF8))
            {
                return reader.ReadToEnd();
            }

        }


        internal static string LoadTemplateForEmitting(string resourceName)
        {
            var resource = LoadEmbeddedResource($"ControllersGenerators.Attributes.{resourceName}.cs");
            return AutoGeneratedHeader;


        }
    }
}
